generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model events {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  slug              String
  description       String
  img_url           String
  event_date        DateTime         @db.Timestamp(6)
  cover_price       Decimal          @db.Decimal
  event_location_id String           @db.Uuid
  event_category_id String           @db.Uuid
  event_categories  event_categories @relation(fields: [event_category_id], references: [id])
  locations         locations        @relation(fields: [event_location_id], references: [id])
}

model locations {
  id      String   @id(map: "location_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String   @unique(map: "location_name_key")
  address String
  events  events[]
}

model order_items {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity BigInt
  price    Decimal @db.Decimal
  order_id String  @db.Uuid
  user_id  String
  orders   orders  @relation(fields: [order_id], references: [id])
  users    users   @relation(fields: [user_id], references: [id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  total_amount     Decimal       @db.Decimal
  order_date       DateTime      @db.Timestamp(6)
  status           String
  shipping_address String?
  order_user_id    String
  order_items      order_items[]
  users            users         @relation(fields: [order_user_id], references: [id])
}

model products {
  id                  String              @id(map: "product_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  name                String
  slug                String
  description         String
  cost                Decimal             @db.Decimal
  price               Decimal             @db.Decimal
  sizes               String[]
  colors              String[]
  stock               BigInt
  status              String
  img_url             String
  discount_start_date DateTime?           @db.Timestamp(6)
  discount_end_date   DateTime?           @db.Timestamp(6)
  product_category_id String?             @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  has_discount        Boolean
  discount            Int                 @db.SmallInt
  product_categories  product_categories? @relation(fields: [product_category_id], references: [id], onDelete: Restrict, map: "product_product_category_id_fkey")
  reviews             reviews[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating            BigInt
  comment           String?
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  review_user_id    String
  review_product_id String   @db.Uuid
  products          products @relation(fields: [review_product_id], references: [id])
  users             users    @relation(fields: [review_user_id], references: [id])
}

model users {
  id          String        @id
  fullname    String
  email       String
  phone       String?
  address     String?
  order_items order_items[]
  orders      orders[]
  reviews     reviews[]
}

model event_categories {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug        String
  name        String
  description String?
  events      events[]
}

model product_categories {
  id          String     @id(map: "product_category_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug        String
  name        String
  description String?
  img_url     String
  products    products[]
}
