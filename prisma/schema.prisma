generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model cart_items {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity   Int
  cart_id    String?   @db.Uuid
  variant_id String?   @db.Uuid
  carts      carts?    @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  variants   variants? @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model carts {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  user_id    String?      @db.Uuid
  cart_items cart_items[]
  users      users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  slug     String?    @default(dbgenerated("regexp_replace(lower(name), '\\s+'::text, '-'::text, 'g'::text)"))
  img_url  String?
  type     String
  events   events[]
  products products[]
}

model events {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  slug             String?     @default(dbgenerated("regexp_replace(lower(name), '\\s+'::text, '-'::text, 'g'::text)"))
  description      String?
  date             DateTime    @db.Timestamptz(6)
  event_img        String?
  cover_price      Decimal     @db.Decimal(10, 2)
  category_id      String?     @db.Uuid
  location_id      String?     @db.Uuid
  event_categories categories? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  locations        locations?  @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model locations {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  slug    String?  @default(dbgenerated("regexp_replace(lower(name), '\\s+'::text, '-'::text, 'g'::text)"))
  address String
  events  events[]
}

model order_audit {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  changed_at         DateTime? @default(now()) @db.Timestamptz(6)
  change_description String
  order_id           String?   @db.Uuid
  orders             orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model order_items {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity   Int
  price      Decimal   @db.Decimal(10, 2)
  order_id   String?   @db.Uuid
  variant_id String?   @db.Uuid
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  variants   variants? @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_date       DateTime?     @default(now()) @db.Timestamptz(6)
  status           String
  total_amount     Decimal       @db.Decimal(10, 2)
  shipping_address String
  user_id          String?       @db.Uuid
  order_audit      order_audit[]
  order_items      order_items[]
  users            users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model price_history {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  price      Decimal   @db.Decimal(10, 2)
  start_date DateTime  @db.Timestamptz(6)
  end_date   DateTime? @db.Timestamptz(6)
  variant_id String?   @db.Uuid
  variants   variants? @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String?     @default(dbgenerated("regexp_replace(lower(name), '\\s+'::text, '-'::text, 'g'::text)"))
  description String?
  base_price  Decimal     @db.Decimal(10, 2)
  base_cost   Decimal     @db.Decimal(10, 2)
  category_id String?     @db.Uuid
  categories  categories? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  variants    variants[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment    String?
  rating     Int
  variant_id String?   @db.Uuid
  variants   variants? @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  email   String   @unique
  phone   String?
  address String?
  carts   carts[]
  orders  orders[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model variants {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  colors              String[]
  sizes               String[]
  price               Decimal         @db.Decimal(10, 2)
  cost                Decimal         @db.Decimal(10, 2)
  discount            Decimal?        @db.Decimal(5, 2)
  discount_start_date DateTime?       @db.Timestamptz(6)
  discount_end_date   DateTime?       @db.Timestamptz(6)
  permanent_discount  Boolean?        @default(false)
  status              String
  stock               Int
  img_url             String?
  product_id          String?         @db.Uuid
  cart_items          cart_items[]
  order_items         order_items[]
  price_history       price_history[]
  reviews             reviews[]
  products            products?       @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
